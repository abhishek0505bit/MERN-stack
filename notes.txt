features learnt in this course: 




---------------------------------
- user schema and models
- 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LECTURE - 3 (SERVER):
    create a folder named server( mkdir server )
    install express: (npm i express)
    try to run it : using (npm run start), if it shows error then change the port

    TO run the script : 
        node relative_path_of_the_server.js or
    use nodemon command
        install : nodemon (npm i nodemon): this will help the server to restart whenever you make changes in the code 
        for running the nodemon : 
            npx nodemon relative_path_of_the_server.js
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LECTURE - 4 (EXPRESS ROUTERS): 
    with the use of routers we make sure that the code looks clean with ALL THE ROUTES IN THE ROUTER FOLDER and the main_program(i.e, server) in server.js
    create a new folder "router" inside server folder
    create a new file under it (auth-router.js)

    whenever we are using router, these things are necessary:
        to import the router, mount it 
        to use app.use("api/auth", router), in server.js to tell it that dont focus on app.get(/) things, 
            so what happens the moment it comes to the line : app.use("api/auth", router), it will go to auth-router.js
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LECTURE - 5 (CONTROLLERS) :
    controllers will contain all the methods/functions used inside the router
    create a folder inside server with name "controllers"
    Inside controllers folder:
        create auth-controller.js: 
            this will contain all the functions used in the router.js file
    for projects in express js, always go with async functions 
        if an async fun is used, then catch the error if it throws any with try catch, [or use express js package i.e, express-async-errors to handle them: advanced ]

    Inside controller, we define all the functions that we use in the router, thats it..
    router will call the controller functions
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LECTURE - 6 (User registration in Express.js with postman) :
    you can download postman extension as well in your vs code..
    here we are creating new data i.e, user is performing registration operation
        Inside auth router, we change the registration method from get to post

    on successful execution of request, it should respond as : res.status(200).json({msg: req.body})
    req.body is the data that we are sending from the postman

    when hitting a post request from postman for the registration with the url : http://localhost:3000/api/auth/register,
    header as : Content-Type: application/json, (which tells that you are passing the request in json format)
    and the body as : 
    {
    "username": "abhishek",
    "email": "abhi@gmail.com"
    }
    , you may get {}, empty response in the postman
    to fix that you have to tell in the code in server.js , that express needs to handle the json data
        Inside server.js, use the command : app.use(express.json());
            This statement tells that you can use the json format under this file..
    now if you hit the post request, then you can see the response in json format

    NOTE:
    if you get response as {}, 
    then you might have not used app.use(express.json()), before hitting the post request

    if you get response as { msg: {} },
    then you might have not set the header: Content-Type = application/json
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LECTURE - 7 (Connecting Backend with MongoDB) :
    go to mongo db atlas:
        sign in, 
        choose free category for cluster
        then once cluster is created, (check that you have some data in database access and network acccess)
        go to database, click on connect, choose mongoDB compass option.. and paste the connection string in compass
    install mongoose package: npm i mongoose

    create utils folder inside server folder.
        inside that : create db.js

    Install dot env for env files: npm install dotenv

    connectDB is used to establish connection to local database or atlas server..
    the code will still run without connectDB but it wont store anything or retrieve anything from the database since connectDB is not used.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




















